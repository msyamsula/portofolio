diff --git a/binary/http/.env b/binary/http/.env
index 5bbb5a1..26cdcf1 100644
--- a/binary/http/.env
+++ b/binary/http/.env
@@ -24,4 +24,6 @@ REDIRECT_CHAT=http://0.0.0.0:8002
 # DON'T SPECIFY IT IN CONFIGMAP OR SECRET   
 GOOGLE_CLIENT_ID=
 GOOGLE_REDIRECT_OAUTH=
-GOOGLE_SECRET=
\ No newline at end of file
+GOOGLE_SECRET=
+
+OPENAI_API_KEY=""
\ No newline at end of file
diff --git a/binary/http/deployment.yaml b/binary/http/deployment.yaml
index 83be4d4..d0db92e 100644
--- a/binary/http/deployment.yaml
+++ b/binary/http/deployment.yaml
@@ -18,6 +18,17 @@ stringData:
   PORT: "12000"
   JAEGER_HOST: "jaeger-clusterip:4317"
   REDIRECT_CHAT: https://chat.syamsul.online
+  OPENAI_API_KEY: ""
+
+---
+apiVersion: v1
+kind: Secret
+metadata:
+  name: google-secret
+stringData:
+  GOOGLE_CLIENT_ID: 
+  GOOGLE_REDIRECT_OAUTH: 
+  GOOGLE_SECRET: 
 
 ---
 # cluster IP
diff --git a/binary/http/main.go b/binary/http/main.go
index 2b795b9..dbcd418 100644
--- a/binary/http/main.go
+++ b/binary/http/main.go
@@ -14,6 +14,7 @@ import (
 	"github.com/msyamsula/portofolio/binary/postgres"
 	"github.com/msyamsula/portofolio/binary/redis"
 	"github.com/msyamsula/portofolio/binary/telemetry"
+	chatgpt "github.com/msyamsula/portofolio/domain/chat-gpt"
 	"github.com/msyamsula/portofolio/domain/google"
 	graphhttp "github.com/msyamsula/portofolio/domain/graph/http"
 	messagehttp "github.com/msyamsula/portofolio/domain/message/http"
@@ -120,6 +121,12 @@ func initGoogleSigninService(userSvc *service.Service) *google.Service {
 	})
 }
 
+func initChatGptHandler() *chatgpt.Handler {
+	token := os.Getenv("OPENAI_API_KEY")
+	svc := chatgpt.NewService(token)
+	return chatgpt.NewHandler(svc)
+}
+
 func main() {
 	appName := "backend"
 
@@ -150,6 +157,7 @@ func main() {
 	graphHandler := initGraphHandler()
 	messageHandler := initMessageHandler(pg)
 	googleSigninHandler := initGoogleSigninService(userSvc)
+	chatgptHandler := initChatGptHandler()
 
 	// create server routes
 	r := mux.NewRouter()
@@ -166,6 +174,8 @@ func main() {
 	// url
 	r.HandleFunc("/short", urlHandler.HashUrl)
 	r.HandleFunc("/{shortUrl}", urlHandler.RedirectShortUrl)
+	// chat gpt
+	r.HandleFunc("/code/review", chatgptHandler.CodeReview)
 
 	// cors option
 	c := cors.New(cors.Options{
diff --git a/domain/chat-gpt/handler.go b/domain/chat-gpt/handler.go
new file mode 100644
index 0000000..e55d7ed
--- /dev/null
+++ b/domain/chat-gpt/handler.go
@@ -0,0 +1,52 @@
+package chatgpt
+
+import (
+	"encoding/json"
+	"net/http"
+)
+
+type Handler struct {
+	svc *service
+}
+
+func NewHandler(svc *service) *Handler {
+	return &Handler{
+		svc: svc,
+	}
+}
+
+func (h *Handler) CodeReview(w http.ResponseWriter, req *http.Request) {
+	if req.Method != http.MethodPost {
+		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
+		return
+	}
+	defer req.Body.Close()
+
+	type request struct {
+		Code string `json:"code"`
+	}
+	reqBody := &request{}
+	err := json.NewDecoder(req.Body).Decode(reqBody)
+	if err != nil {
+		http.Error(w, err.Error(), http.StatusBadRequest)
+		return
+	}
+
+	review, err := h.svc.CodeReview(reqBody.Code)
+	if err != nil {
+		http.Error(w, err.Error(), http.StatusInternalServerError)
+		return
+	}
+
+	w.Header().Set("Content-Type", "application/json")
+	response := struct {
+		Review string `json:"review"`
+	}{
+		Review: review,
+	}
+	err = json.NewEncoder(w).Encode(response)
+	if err != nil {
+		http.Error(w, err.Error(), http.StatusInternalServerError)
+		return
+	}
+}
diff --git a/domain/chat-gpt/service.go b/domain/chat-gpt/service.go
new file mode 100644
index 0000000..6188ee5
--- /dev/null
+++ b/domain/chat-gpt/service.go
@@ -0,0 +1,54 @@
+package chatgpt
+
+import (
+	"context"
+	"fmt"
+
+	"github.com/openai/openai-go"
+	"github.com/openai/openai-go/option"
+	"github.com/openai/openai-go/packages/param"
+)
+
+type service struct {
+	chatGptClient *openai.Client
+}
+
+func NewService(t string) *service {
+	client := openai.NewClient(
+		option.WithAPIKey(t), // defaults to os.LookupEnv("OPENAI_API_KEY")
+	)
+	return &service{
+		chatGptClient: &client,
+	}
+}
+
+func (s *service) CodeReview(code string) (string, error) {
+	// Implement the logic to interact with the ChatGPT API and get a response
+	// This is a placeholder implementation
+
+	codeReviewRoleAndPersona := `
+	You are an elite Google-level software engineer. 
+	Your job is to provide precise, high-quality code reviews.
+	Your input may be a code snippet or a git diff. 
+	Be concise and direct ‚Äî do not use filler phrases like ‚ÄúCertainly‚Äù or ‚ÄúHere‚Äôs the review.‚Äù 
+	After each suggestion, rewrite only the relevant code snippet that needs improvement.`
+
+	chatCompletion, err := s.chatGptClient.Chat.Completions.New(context.Background(), openai.ChatCompletionNewParams{
+		Messages: []openai.ChatCompletionMessageParamUnion{
+			openai.SystemMessage(codeReviewRoleAndPersona),
+			openai.UserMessage(code),
+		},
+		Model:       "gpt-4.1",
+		Temperature: param.Opt[float64]{Value: 0.3},
+		MaxTokens:   param.Opt[int64]{Value: 2048},
+		TopP:        param.Opt[float64]{Value: 0.2},
+	})
+
+	if err != nil {
+		fmt.Println(err.Error())
+		return "", err
+	}
+
+	review := chatCompletion.Choices[0].Message.Content
+	return review, nil
+}
diff --git a/go.mod b/go.mod
index 391a375..a44f4eb 100644
--- a/go.mod
+++ b/go.mod
@@ -13,6 +13,7 @@ require (
 	github.com/joho/godotenv v1.5.1
 	github.com/lib/pq v1.10.9
 	github.com/nsqio/go-nsq v1.1.0
+	github.com/openai/openai-go v0.1.0-beta.10
 	github.com/prometheus/client_golang v1.21.0
 	github.com/redis/go-redis/v9 v9.7.0
 	github.com/rs/cors v1.11.1
@@ -46,6 +47,10 @@ require (
 	github.com/prometheus/client_model v0.6.1 // indirect
 	github.com/prometheus/common v0.62.0 // indirect
 	github.com/prometheus/procfs v0.15.1 // indirect
+	github.com/tidwall/gjson v1.14.4 // indirect
+	github.com/tidwall/match v1.1.1 // indirect
+	github.com/tidwall/pretty v1.2.1 // indirect
+	github.com/tidwall/sjson v1.2.5 // indirect
 	go.opentelemetry.io/auto/sdk v1.1.0 // indirect
 	go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.34.0 // indirect
 	go.opentelemetry.io/otel/metric v1.34.0 // indirect
diff --git a/go.sum b/go.sum
index ca969f1..128f12f 100644
--- a/go.sum
+++ b/go.sum
@@ -72,6 +72,8 @@ github.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=
 github.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=
 github.com/onsi/gomega v1.25.0 h1:Vw7br2PCDYijJHSfBOWhov+8cAnUf8MfMaIOV323l6Y=
 github.com/onsi/gomega v1.25.0/go.mod h1:r+zV744Re+DiYCIPRlYOTxn0YkOLcAnW8k1xXdMPGhM=
+github.com/openai/openai-go v0.1.0-beta.10 h1:CknhGXe8aXQMRuqg255PFnWzgRY9nEryMxoNIBBM9tU=
+github.com/openai/openai-go v0.1.0-beta.10/go.mod h1:g461MYGXEXBVdV5SaR/5tNzNbSfwTBBefwc+LlDCK0Y=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/prometheus/client_golang v1.21.0 h1:DIsaGmiaBkSangBgMtWdNfxbMNdku5IK6iNhrEqWvdA=
@@ -90,6 +92,16 @@ github.com/rs/cors v1.11.1 h1:eU3gRzXLRK57F5rKMGMZURNdIG4EoAmX8k94r9wXWHA=
 github.com/rs/cors v1.11.1/go.mod h1:XyqrcTp5zjWr1wsJ8PIRZssZ8b/WMcMf71DJnit4EMU=
 github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
 github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+github.com/tidwall/gjson v1.14.2/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=
+github.com/tidwall/gjson v1.14.4 h1:uo0p8EbA09J7RQaflQ1aBRffTR7xedD2bcIVSYxLnkM=
+github.com/tidwall/gjson v1.14.4/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=
+github.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=
+github.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=
+github.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=
+github.com/tidwall/pretty v1.2.1 h1:qjsOFOWWQl+N3RsoF5/ssm1pHmJJwhjlSbZ51I6wMl4=
+github.com/tidwall/pretty v1.2.1/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=
+github.com/tidwall/sjson v1.2.5 h1:kLy8mja+1c9jlljvWTlSazM7cKDRfJuR/bOJhcY5NcY=
+github.com/tidwall/sjson v1.2.5/go.mod h1:Fvgq9kS/6ociJEDnK0Fk1cpYF4FIW6ZF7LAe+6jwd28=
 github.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
 go.opentelemetry.io/auto/sdk v1.1.0 h1:cH53jehLUN6UFLY71z+NDOiNJqDdPRaXzTel0sJySYA=
 go.opentelemetry.io/auto/sdk v1.1.0/go.mod h1:3wSPjt5PWp2RhlCcmmOial7AvC4DQqZb7a7wCow3W8A=
diff --git a/ui/code-review/index.html b/ui/code-review/index.html
index 84f0028..09f0f49 100644
--- a/ui/code-review/index.html
+++ b/ui/code-review/index.html
@@ -6,6 +6,10 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>Code Review Assistant</title>
     <script src="https://cdn.tailwindcss.com"></script>
+    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css" />
+    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
+    <script>hljs.highlightAll();</script>
 </head>
 
 <body class="bg-gray-100 text-gray-900 font-sans">
@@ -13,33 +17,21 @@
     <div class="max-w-3xl mx-auto p-6 mt-10 bg-white shadow rounded">
         <h1 class="text-2xl font-bold mb-4">ü§ñ Code Review Assistant</h1>
 
-        <label class="block mb-2 font-medium">Select Language:</label>
-        <select id="language" class="mb-4 p-2 border rounded w-full">
-            <option value="go">Go</option>
-            <option value="python">Python</option>
-            <option value="javascript">JavaScript</option>
-        </select>
 
         <label class="block mb-2 font-medium">Paste your code:</label>
         <textarea id="code" rows="10" class="w-full p-3 border rounded font-mono"
             placeholder="Paste your code here..."></textarea>
 
-        <button onclick="analyzeCode()" class="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
+        <button id="analyze-button" onclick="analyzeCode()"
+            class="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
             Analyze Code
         </button>
 
+
         <div id="output" class="mt-6 space-y-4 hidden">
             <div>
-                <h2 class="font-semibold">üîç Explanation</h2>
-                <pre id="explanation" class="bg-gray-100 p-3 rounded whitespace-pre-wrap"></pre>
-            </div>
-            <div>
-                <h2 class="font-semibold">üí° Suggestions</h2>
-                <pre id="suggestions" class="bg-gray-100 p-3 rounded whitespace-pre-wrap"></pre>
-            </div>
-            <div>
-                <h2 class="font-semibold">‚ö†Ô∏è Warnings</h2>
-                <pre id="warnings" class="bg-gray-100 p-3 rounded whitespace-pre-wrap"></pre>
+                <h2 class="font-semibold">üîç Reviews</h2>
+                <div id="reviews"></div>
             </div>
         </div>
     </div>
@@ -47,20 +39,25 @@
     <script>
         async function analyzeCode() {
             const code = document.getElementById('code').value;
-            const language = document.getElementById('language').value;
+            let button = document.getElementById("analyze-button")
+            const originalText = button.textContent
+            button.textContent = "Analyzing... Please wait"
 
-            const res = await fetch('http://localhost:3000/review', {
+            const res = await fetch('http://0.0.0.0:12000/code/review', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
-                body: JSON.stringify({ code, language }),
+                body: JSON.stringify({
+                    code
+                }),
             });
 
+
             const data = await res.json();
+            button.textContent = originalText
 
-            document.getElementById('explanation').textContent = data.explanation || '(None)';
-            document.getElementById('suggestions').textContent = data.suggestions || '(None)';
-            document.getElementById('warnings').textContent = data.warnings || '(None)';
+            document.getElementById('reviews').innerHTML = marked.parse(data.review) || '(None)';
             document.getElementById('output').classList.remove('hidden');
+            hljs.highlightAll();
         }
     </script>
 
