// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msyamsula/portofolio/domain/message/http (interfaces: Service)

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/msyamsula/portofolio/domain/message/repository"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockService) AddMessage(arg0 context.Context, arg1 repository.Message) (repository.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", arg0, arg1)
	ret0, _ := ret[0].(repository.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockServiceMockRecorder) AddMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockService)(nil).AddMessage), arg0, arg1)
}

// GetConversation mocks base method.
func (m *MockService) GetConversation(arg0 context.Context, arg1, arg2 int64) ([]repository.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversation", arg0, arg1, arg2)
	ret0, _ := ret[0].([]repository.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversation indicates an expected call of GetConversation.
func (mr *MockServiceMockRecorder) GetConversation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversation", reflect.TypeOf((*MockService)(nil).GetConversation), arg0, arg1, arg2)
}
